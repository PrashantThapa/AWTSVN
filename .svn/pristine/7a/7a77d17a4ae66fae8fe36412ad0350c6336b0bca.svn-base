using System;
using System.Collections.Generic;

using System.Data;
using HRFA.ATT;
using HRFA.COMMON;
using System.Configuration;
using Oracle.ManagedDataAccess.Client;

namespace HRFA.DataLayer
{
    public class DLLPurchaseOrder
    {
        public string SavePurchaseOrder(List<ATTPurchaseOrder> lst, string appID, string modID)
        {
            string sp = "";
            string msg = "";
            Int64? submissionNo = null;
            Int64? oldSubmissionNo = null;
            string entryBy = "";

            GetConnection getConn = new GetConnection();
            OracleConnection conn = getConn.GetDbConn(getConn.LoginUser);
            OracleTransaction tran = conn.BeginTransaction();

            try
            {
                foreach (ATTPurchaseOrder objPurchaseOrder in lst)
                {
                    if (objPurchaseOrder.Action == "E")
                    {
                        sp = ConfigurationManager.AppSettings["DatabaseSchemaDirty"] + ".DCPR_EDIT_PURCHASE_ORDER";
                        msg = "Successfully Edited.";
                    }
                    else if (objPurchaseOrder.Action == "A")
                    {
                        sp = ConfigurationManager.AppSettings["DatabaseSchemaDirty"] + ".DCPR_ADD_PURCHASE_ORDER";
                        msg = "Successfully Saved.";

                    }



                    if (sp != "")
                    {
                        List<OracleParameter> paramList = new List<OracleParameter>();

                        paramList.Add(SqlHelper.GetOraParam(":p_SUBMISSION_NO", submissionNo, OracleDbType.Int64, System.Data.ParameterDirection.InputOutput));
                        paramList.Add(SqlHelper.GetOraParam(":p_VENDORS_ID", objPurchaseOrder.Vendor.VendorID, OracleDbType.Int16, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_PURCHASE_DATE", objPurchaseOrder.PurchaseDate, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_ITEM_ID", objPurchaseOrder.Item.ItemID, OracleDbType.Int16, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_QTY", objPurchaseOrder.Quantity, OracleDbType.Int32, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_UNIT_ID", objPurchaseOrder.Unit.UnitID, OracleDbType.Int16, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_UNIT_PRICE", objPurchaseOrder.UnitPrice, OracleDbType.Double, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_AMOUNT", objPurchaseOrder.Amount, OracleDbType.Double, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_FROM_DATE", objPurchaseOrder.FromDate, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_TO_DATE", objPurchaseOrder.ToDate, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_R_STATUS", objPurchaseOrder.RStatus, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_ENTRY_BY", objPurchaseOrder.EntryBy, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_ENTRY_DATE", objPurchaseOrder.EntryDate, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_BLANKET_PURCHASE_ID", objPurchaseOrder.BlanketPurchaseID, OracleDbType.Int32, System.Data.ParameterDirection.Input));
                        
                        paramList[0].Size = 16;
                        SqlHelper.ExecuteNonQuery(tran, CommandType.StoredProcedure, sp, paramList.ToArray());
                        submissionNo = Int64.Parse(paramList[0].Value.ToString());
                        oldSubmissionNo = objPurchaseOrder.OldSubmissionNo;
                        entryBy = objPurchaseOrder.EntryBy;
                        paramList.Clear();
                        

                    }
                }
                if (oldSubmissionNo != null)
                {
                    DLLUserTranVerification dllUTV = new DLLUserTranVerification();
                    dllUTV.SaveVerifyLog(tran, entryBy, oldSubmissionNo, submissionNo, appID, modID);
                }
                tran.Commit();
            }
            catch (Exception ex)
            {

                tran.Rollback();
                throw (ex);
            }
            finally
            {
                getConn.CloseDbConn();
            }
            return msg +"</br> Please Note Your Submission No.</br><b>" + submissionNo + "</b>";
        }


        public List<ATTPurchaseOrder> GetBlanketPurchase(Int32? blanketPurchaseID)
        {
            GetConnection getConn = new GetConnection();
            OracleConnection conn = getConn.GetDbConn(getConn.LoginUser);

            List<ATTPurchaseOrder> lstPurchaseOrder = new List<ATTPurchaseOrder>();

            try
            {
                string SP = ConfigurationManager.AppSettings["DatabaseSchema"] + ".CPR_GET_BLANKET_PURCHASE";

                List<OracleParameter> paramList = new List<OracleParameter>();
                paramList.Add(SqlHelper.GetOraParam(":p_BLANKET_PURCHASE_ID", blanketPurchaseID, OracleDbType.Int32, ParameterDirection.Input));
                paramList.Add(SqlHelper.GetOraParam(":P_RC", null, OracleDbType.RefCursor, ParameterDirection.Output));

                DataSet ds = SqlHelper.ExecuteDataset(conn, CommandType.StoredProcedure, SP, paramList.ToArray());

                foreach (DataRow drow in ds.Tables[0].Rows)
                {
                    ATTPurchaseOrder objPurchaseOrder = new ATTPurchaseOrder();
                    objPurchaseOrder.BlanketPurchaseID =  string.IsNullOrEmpty(drow["BLANKET_PURCHASE_ID"].ToString()) ? (Int32?)null : Int32.Parse(drow["BLANKET_PURCHASE_ID"].ToString());
                    objPurchaseOrder.Vendor.VendorID = string.IsNullOrEmpty(drow["VENDORS_ID"].ToString()) ? (Int16?)null : Int16.Parse(drow["VENDORS_ID"].ToString());
                    objPurchaseOrder.Vendor.VendorName = drow["VENDORS_NAME"].ToString();
                    objPurchaseOrder.Item.ItemID = string.IsNullOrEmpty(drow["ITEM_ID"].ToString()) ? (Int16?)null : Int16.Parse(drow["ITEM_ID"].ToString());
                    objPurchaseOrder.Item.ItemDesc = drow["ITEM_DESC"].ToString();
                    objPurchaseOrder.Quantity =  string.IsNullOrEmpty(drow["QTY"].ToString()) ? (Int16?)null : Int16.Parse(drow["QTY"].ToString());
                    objPurchaseOrder.QuantityRecieved = string.IsNullOrEmpty(drow["QTY_RECIEVED"].ToString()) ? (Int16?)null : Int16.Parse(drow["QTY_RECIEVED"].ToString());
                    objPurchaseOrder.Unit.UnitID = string.IsNullOrEmpty(drow["UNIT_ID"].ToString()) ? (Int16?)null : Int16.Parse(drow["UNIT_ID"].ToString());
                    objPurchaseOrder.Unit.UnitDesc = drow["UNIT_DESC"].ToString();
                    objPurchaseOrder.UnitPrice = string.IsNullOrEmpty(drow["UNIT_PRICE"].ToString()) ? (Double?)null : Double.Parse(drow["UNIT_PRICE"].ToString());
                    lstPurchaseOrder.Add(objPurchaseOrder);
                }

                return lstPurchaseOrder;
            }
            catch (Exception ex)
            {

                throw (ex);
            }
            finally
            {
                getConn.CloseDbConn();
            }
        }


        public List<ATTPurchaseOrder> GetPurchaseOrderBySubmissionNo(Int64? submissionNo)
        {
            GetConnection getConn = new GetConnection();
            OracleConnection conn = getConn.GetDbConn(getConn.LoginUser);

            List<ATTPurchaseOrder> lstPurchaseOrder = new List<ATTPurchaseOrder>();

            try
            {
                string SP = ConfigurationManager.AppSettings["DatabaseSchemaDirty"] + ".DCPR_GET_PURCHASE_ORDER";

                List<OracleParameter> paramList = new List<OracleParameter>();
                paramList.Add(SqlHelper.GetOraParam(":P_SUBMISSION_NO", submissionNo, OracleDbType.Int64, ParameterDirection.Input));
                paramList.Add(SqlHelper.GetOraParam(":P_RC", null, OracleDbType.RefCursor, ParameterDirection.Output));

                DataSet ds = SqlHelper.ExecuteDataset(conn,CommandType.StoredProcedure, SP, paramList.ToArray());

                foreach (DataRow drow in ds.Tables[0].Rows)
                {
                    ATTPurchaseOrder objPurchaseOrder = new ATTPurchaseOrder();
                    objPurchaseOrder.Vendor.VendorID = string.IsNullOrEmpty(drow["VENDORS_ID"].ToString()) ? (Int16?)null : Int16.Parse(drow["VENDORS_ID"].ToString());
                    objPurchaseOrder.Vendor.VendorName = drow["VENDORS_NAME"].ToString();
                    objPurchaseOrder.PurchaseDate = drow["PURCHASE_DATE"].ToString();
                    objPurchaseOrder.Item.ItemID = string.IsNullOrEmpty(drow["ITEM_ID"].ToString()) ? (Int16?)null : Int16.Parse(drow["ITEM_ID"].ToString());
                    objPurchaseOrder.Item.ItemDesc = drow["ITEM_DESC"].ToString();
                    objPurchaseOrder.Quantity = string.IsNullOrEmpty(drow["QTY"].ToString()) ? (Int16?)null : Int16.Parse(drow["QTY"].ToString());
                    objPurchaseOrder.Unit.UnitID = string.IsNullOrEmpty(drow["UNIT_ID"].ToString()) ? (Int16?)null : Int16.Parse(drow["UNIT_ID"].ToString());
                    objPurchaseOrder.Unit.UnitDesc = drow["UNIT_DESC"].ToString();
                    objPurchaseOrder.UnitPrice = string.IsNullOrEmpty(drow["UNIT_PRICE"].ToString()) ? (Double?)null : Double.Parse(drow["UNIT_PRICE"].ToString());
                    objPurchaseOrder.Amount = string.IsNullOrEmpty(drow["AMOUNT"].ToString()) ? (Double?)null : Double.Parse(drow["AMOUNT"].ToString());
                    objPurchaseOrder.EntryBy = drow["ENTRY_BY"].ToString();
                    
                    lstPurchaseOrder.Add(objPurchaseOrder);
                }

                return lstPurchaseOrder;
            }
            catch (Exception ex)
            {

                throw (ex);
            }
            finally
            {
                getConn.CloseDbConn();
            }
        }
    }
}
