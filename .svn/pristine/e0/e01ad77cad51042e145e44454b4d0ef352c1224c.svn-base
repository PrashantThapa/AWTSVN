using System;
using System.Collections.Generic;

using System.Data;
using HRFA.ATT;
using HRFA.COMMON;
using System.Configuration;
using Oracle.ManagedDataAccess.Client;

namespace HRFA.DataLayer
{
    public class DLLEmployeeMedicalAttr
    {
        public List<ATTEmpMedicalCondition> GetEmpMedicalConditions(Int64? ID, OracleConnection conn, bool isDirty = false)
        {
            List<ATTEmpMedicalCondition> lst = new List<ATTEmpMedicalCondition>();

            try
            {
                List<OracleParameter> paramList = new List<OracleParameter>();
                string sp = ConfigurationManager.AppSettings["DatabaseSchema"] + ".CPR_GET_EMP_MED_CONDITION";

                if (isDirty)
                {
                    sp = ConfigurationManager.AppSettings["DatabaseSchemaDirty"] + ".DCPR_GET_EMP_MED_CONDITION";
                }



                paramList.Add(SqlHelper.GetOraParam(":p_SUBMISSION_NO", ID, OracleDbType.Int64, System.Data.ParameterDirection.Input));
                paramList.Add(SqlHelper.GetOraParam(":P_RC", null, OracleDbType.RefCursor, ParameterDirection.Output));

                DataSet ds = SqlHelper.ExecuteDataset(conn, CommandType.StoredProcedure, sp, paramList.ToArray());

                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ((DataTable)ds.Tables[0]).Rows)
                    {

                        ATTEmpMedicalCondition obj = new ATTEmpMedicalCondition();

                        obj.ProblemName = dr["PROBLEM"].ToString();
                        obj.ProblemStart= dr["START_DATE"].ToString();
                        obj.ProblemReason = dr["REASON"].ToString();
                        obj.DoctorName = dr["DOCTOR_NAME"].ToString();
                        obj.DoctorMobileNo = string.IsNullOrEmpty(dr["DOCTOR_MNO"].ToString()) ? (Int64?)null : Int64.Parse(dr["DOCTOR_MNO"].ToString());
                        obj.DoctorAddress = dr["DOC_ADD"].ToString();
                        obj.DoctorEmail = dr["DOC_EMAIL"].ToString();
                        obj.FromDate = dr["FROM_DATE"].ToString();
                        obj.ToDate = dr["TO_DATE"].ToString();
                        obj.EntryBy = dr["ENTRY_BY"].ToString();
                        obj.EntryDate = dr["ENTRY_DATE"].ToString();
                        obj.RStatus = dr["R_STAUS"].ToString();

                        lst.Add(obj);

                    }

                }

                return lst;

            }
            catch (Exception ex)
            {

                throw (ex);
            }
        }


        #region Dirty
        public bool SaveDirtyEmployeeMedicalAttr(List<ATTEmpMedicalCondition> lst, Int64? submissionNo, Int32? seqNo, string entryBy, OracleTransaction tran)
        {
            try
            {
                string sp = "";

                foreach (ATTEmpMedicalCondition objEmpMedicalAttr in lst)
                {
                    if (objEmpMedicalAttr.Action == "E")
                    {
                        sp = ConfigurationManager.AppSettings["DatabaseSchemaDirty"] + ".DCPR_EDIT_EMP_MED_CONDITION";

                    }
                    else if (objEmpMedicalAttr.Action == "A")
                    {
                        sp = ConfigurationManager.AppSettings["DatabaseSchemaDirty"] + ".DCPR_ADD_EMP_MED_CONDITION";

                    }

                    if (sp != "")
                    {
                        List<OracleParameter> paramList = new List<OracleParameter>();

                        paramList.Add(SqlHelper.GetOraParam(":p_SUBMISSION_NO", submissionNo, OracleDbType.Int64, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":P_SEQ_NO", seqNo, OracleDbType.Int32, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_PROBLEM", objEmpMedicalAttr.ProblemName, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_START_DATE", objEmpMedicalAttr.ProblemStart, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_REASON", objEmpMedicalAttr.ProblemReason, OracleDbType.Varchar2, System.Data.ParameterDirection.InputOutput));
                        paramList.Add(SqlHelper.GetOraParam(":p_DOCTOR_NAME", objEmpMedicalAttr.DoctorName, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_DOCTOR_MNO", objEmpMedicalAttr.DoctorMobileNo, OracleDbType.Int64, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_DOC_ADD", objEmpMedicalAttr.DoctorAddress, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_DOC_EMAIL", objEmpMedicalAttr.DoctorEmail, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_FROM_DATE", objEmpMedicalAttr.FromDate, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_TO_DATE", objEmpMedicalAttr.ToDate, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_ENTRY_BY", objEmpMedicalAttr.EntryBy, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_ENTRY_DATE", null, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));
                        paramList.Add(SqlHelper.GetOraParam(":p_R_STATUS", objEmpMedicalAttr.RStatus, OracleDbType.Varchar2, System.Data.ParameterDirection.Input));

                        SqlHelper.ExecuteNonQuery(tran, CommandType.StoredProcedure, sp, paramList.ToArray());

                        paramList.Clear();

                    }
                  
                }

                return true;
            }
            catch (Exception ex)
            {
                throw new Exception("Error in Saving Employee Medical Attributes !!!" + ex.Message);
                throw (ex);
            }
        }
        #endregion
    }
}
