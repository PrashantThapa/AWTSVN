using System;
using HRFA.ATT;
using HRFA.BLL;
using HRFA.COMMON;

namespace HRFA.Handlers.FAMS
{
    /// <summary>
    /// Summary description for BudgetTransferHandler
    /// </summary>
    public class BudgetTransferHandler : BaseHandler
    {
        public object SaveBudgetTransferDetail(string args, string appID, string modID)
        {
            BLLBudgetTransfer objBudgetTransferBll = new BLLBudgetTransfer();
            ATTBudgetTransfer objBudgetTransferAtt = (ATTBudgetTransfer)JsonUtility.DeSerialize(args, typeof (ATTBudgetTransfer));
            JsonResponse response = new JsonResponse();
            try
            {
                response.Message = objBudgetTransferBll.SaveBudgetTransferDetail(objBudgetTransferAtt, appID, modID);
                response.IsSucess = true;
            }
            catch (Exception ex)
            {
                response.Message = ex.Message;
                response.IsSucess=false;
            }
            return JsonUtility.Serialize(response);
        }

        public object GetBudgetTransferBySubNo(Int64? SubNo)
        {
            JsonResponse response = new JsonResponse();
            BLLBudgetTransfer objBedgetTransferBll = new BLLBudgetTransfer();
            try
            {
                response = objBedgetTransferBll.GetBudgetTransferBySubNo(SubNo);
                response.IsSucess = true; 
            }
            catch (Exception ex)
            {
                response.IsSucess = false;
                response.Message = ex.Message;
            }
            return JsonUtility.Serialize(response);
        }

        public object GetDetails(Int32? OfficeCD, Int32? CostCenterID, string fiscalyear)
        {
            JsonResponse response = new JsonResponse();
            BLLBudgetTransfer objBLLBudgetTransfer = new BLLBudgetTransfer();
            try
            {
                response = objBLLBudgetTransfer.GetDetails(OfficeCD, CostCenterID, fiscalyear);
            }
            catch (Exception ex)
            {
                response.Message = ex.Message;
                response.IsSucess = false;
            }
            return JsonUtility.Serialize(response);
        }

        public object GetBudgetItem(Int32? OfficeCD, Int32? CostCenterID)
        {
            JsonResponse response = new JsonResponse();
            BLLBudgetTransfer objBLLBudgetTransfer = new BLLBudgetTransfer();
            try
            {
                response = objBLLBudgetTransfer.GetBudgetItem(OfficeCD, CostCenterID);
            }
            catch (Exception ex)
            {
                response.Message = ex.Message;
                response.IsSucess = false;
            }
            return JsonUtility.Serialize(response);
        }

        public object GetBudgetTransfer(string args)
        {
            JsonResponse response = new JsonResponse();
            ATTBudgetTransfer objBudgetTransferAtt = (ATTBudgetTransfer)JsonUtility.DeSerialize(args, typeof(ATTBudgetTransfer));
            BLLBudgetTransfer objBLLBudgetTransfer = new BLLBudgetTransfer();
            try
            {
                response = objBLLBudgetTransfer.GetBudgetTransfer(objBudgetTransferAtt);
            }
            catch (Exception ex)
            {
                response.Message = ex.Message;
                response.IsSucess = false;
            }
            return JsonUtility.Serialize(response);
        }

    }
}